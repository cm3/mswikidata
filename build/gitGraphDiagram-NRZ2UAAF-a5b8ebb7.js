import{p as t}from"./chunk-TMUBEWPD-1720c25c.js";import{I as r}from"./chunk-KFBOBJHC-d4e3eaa6.js";import{B as e,_ as n,d as o,C as a,D as s,E as c,l as i,s as h,g as d,b as m,c as $,p as l,q as y,e as g,v as p,j as x,u as f,F as u}from"./main-77371978.js";import{p as b}from"./mermaid-parser.core-54ad8a9f.js";import"./_baseUniq-6462737e.js";import"./_basePickBy-1032dd32.js";import"./clone-d7d3919c.js";var w={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},B=e.gitGraph,E=n((()=>a({...B,...s().gitGraph})),"getConfig"),k=new r((()=>{const t=E(),r=t.mainBranchName,e=t.mainBranchOrder;return{mainBranchName:r,commits:new Map,head:null,branchConfig:new Map([[r,{name:r,order:e}]]),branches:new Map([[r,null]]),currBranch:r,direction:"LR",seq:0,options:{}}}));function C(){return c({length:7})}function L(t,r){const e=Object.create(null);return t.reduce(((t,n)=>{const o=r(n);return e[o]||(e[o]=!0,t.push(n)),t}),[])}n(C,"getID"),n(L,"uniqBy");var T=n((function(t){k.records.direction=t}),"setDirection"),M=n((function(t){i.debug("options str",t),t=t?.trim(),t=t||"{}";try{k.records.options=JSON.parse(t)}catch(t){i.error("error while parsing gitGraph options",t.message)}}),"setOptions"),v=n((function(){return k.records.options}),"getOptions"),P=n((function(t){let r=t.msg,e=t.id;const n=t.type;let o=t.tags;i.info("commit",r,e,n,o),i.debug("Entering commit:",r,e,n,o);const a=E();e=g.sanitizeText(e,a),r=g.sanitizeText(r,a),o=o?.map((t=>g.sanitizeText(t,a)));const s={id:e||k.records.seq+"-"+C(),message:r,seq:k.records.seq++,type:n??w.NORMAL,tags:o??[],parents:null==k.records.head?[]:[k.records.head.id],branch:k.records.currBranch};k.records.head=s,i.info("main branch",a.mainBranchName),k.records.commits.set(s.id,s),k.records.branches.set(k.records.currBranch,s.id),i.debug("in pushCommit "+s.id)}),"commit"),R=n((function(t){let r=t.name;const e=t.order;if(r=g.sanitizeText(r,E()),k.records.branches.has(r))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${r}")`);k.records.branches.set(r,null!=k.records.head?k.records.head.id:null),k.records.branchConfig.set(r,{name:r,order:e}),G(r),i.debug("in createBranch")}),"branch"),I=n((t=>{let r=t.branch,e=t.id;const n=t.type,o=t.tags,a=E();r=g.sanitizeText(r,a),e&&(e=g.sanitizeText(e,a));const s=k.records.branches.get(k.records.currBranch),c=k.records.branches.get(r),h=s?k.records.commits.get(s):void 0,d=c?k.records.commits.get(c):void 0;if(h&&d&&h.branch===r)throw new Error(`Cannot merge branch '${r}' into itself.`);if(k.records.currBranch===r){const t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(void 0===h||!h){const t=new Error(`Incorrect usage of "merge". Current branch (${k.records.currBranch})has no commits`);throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["commit"]},t}if(!k.records.branches.has(r)){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") does not exist");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:[`branch ${r}`]},t}if(void 0===d||!d){const t=new Error('Incorrect usage of "merge". Branch to be merged ('+r+") has no commits");throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:['"commit"']},t}if(h===d){const t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${r}`,token:`merge ${r}`,expected:["branch abc"]},t}if(e&&k.records.commits.has(e)){const t=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw t.hash={text:`merge ${r} ${e} ${n} ${o?.join(" ")}`,token:`merge ${r} ${e} ${n} ${o?.join(" ")}`,expected:[`merge ${r} ${e}_UNIQUE ${n} ${o?.join(" ")}`]},t}const m=c||"",$={id:e||`${k.records.seq}-${C()}`,message:`merged branch ${r} into ${k.records.currBranch}`,seq:k.records.seq++,parents:null==k.records.head?[]:[k.records.head.id,m],branch:k.records.currBranch,type:w.MERGE,customType:n,customId:!!e,tags:o??[]};k.records.head=$,k.records.commits.set($.id,$),k.records.branches.set(k.records.currBranch,$.id),i.debug(k.records.branches),i.debug("in mergeBranch")}),"merge"),A=n((function(t){let r=t.id,e=t.targetId,n=t.tags,o=t.parent;i.debug("Entering cherryPick:",r,e,n);const a=E();if(r=g.sanitizeText(r,a),e=g.sanitizeText(e,a),n=n?.map((t=>g.sanitizeText(t,a))),o=g.sanitizeText(o,a),!r||!k.records.commits.has(r)){const t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const s=k.records.commits.get(r);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&(!Array.isArray(s.parents)||!s.parents.includes(o))){throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.")}const c=s.branch;if(s.type===w.MERGE&&!o){throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.")}if(!e||!k.records.commits.has(e)){if(c===k.records.currBranch){const t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const t=k.records.branches.get(k.records.currBranch);if(void 0===t||!t){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${k.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const a=k.records.commits.get(t);if(void 0===a||!a){const t=new Error(`Incorrect usage of "cherry-pick". Current branch (${k.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${r} ${e}`,token:`cherryPick ${r} ${e}`,expected:["cherry-pick abc"]},t}const h={id:k.records.seq+"-"+C(),message:`cherry-picked ${s?.message} into ${k.records.currBranch}`,seq:k.records.seq++,parents:null==k.records.head?[]:[k.records.head.id,s.id],branch:k.records.currBranch,type:w.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${s.id}${s.type===w.MERGE?`|parent:${o}`:""}`]};k.records.head=h,k.records.commits.set(h.id,h),k.records.branches.set(k.records.currBranch,h.id),i.debug(k.records.branches),i.debug("in cherryPick")}}),"cherryPick"),G=n((function(t){if(t=g.sanitizeText(t,E()),!k.records.branches.has(t)){const r=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw r.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},r}{k.records.currBranch=t;const r=k.records.branches.get(k.records.currBranch);k.records.head=void 0!==r&&r?k.records.commits.get(r)??null:null}}),"checkout");function O(t,r,e){const n=t.indexOf(r);-1===n?t.push(e):t.splice(n,1,e)}function q(t){const r=t.reduce(((t,r)=>t.seq>r.seq?t:r),t[0]);let e="";t.forEach((function(t){e+=t===r?"\t*":"\t|"}));const n=[e,r.id,r.seq];for(const t in k.records.branches)k.records.branches.get(t)===r.id&&n.push(t);if(i.debug(n.join(" ")),r.parents&&2==r.parents.length&&r.parents[0]&&r.parents[1]){const e=k.records.commits.get(r.parents[0]);O(t,r,e),r.parents[1]&&t.push(k.records.commits.get(r.parents[1]))}else{if(0==r.parents.length)return;if(r.parents[0]){const e=k.records.commits.get(r.parents[0]);O(t,r,e)}}q(t=L(t,(t=>t.id)))}n(O,"upsert"),n(q,"prettyPrintCommitHistory");var H=n((function(){i.debug(k.records.commits);q([N()[0]])}),"prettyPrint"),z=n((function(){k.reset(),p()}),"clear"),j=n((function(){return[...k.records.branchConfig.values()].map(((t,r)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${r}`)})).sort(((t,r)=>(t.order??0)-(r.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),S=n((function(){return k.records.branches}),"getBranches"),D=n((function(){return k.records.commits}),"getCommits"),N=n((function(){const t=[...k.records.commits.values()];return t.forEach((function(t){i.debug(t.id)})),t.sort(((t,r)=>t.seq-r.seq)),t}),"getCommitsArray"),W={commitType:w,getConfig:E,setDirection:T,setOptions:M,getOptions:v,commit:P,branch:R,merge:I,cherryPick:A,checkout:G,prettyPrint:H,clear:z,getBranchesAsObjArray:j,getBranches:S,getCommits:D,getCommitsArray:N,getCurrentBranch:n((function(){return k.records.currBranch}),"getCurrentBranch"),getDirection:n((function(){return k.records.direction}),"getDirection"),getHead:n((function(){return k.records.head}),"getHead"),setAccTitle:h,getAccTitle:d,getAccDescription:m,setAccDescription:$,setDiagramTitle:l,getDiagramTitle:y},_=n(((r,e)=>{t(r,e),r.dir&&e.setDirection(r.dir);for(const t of r.statements)F(t,e)}),"populate"),F=n(((t,r)=>{const e={Commit:n((t=>r.commit(K(t))),"Commit"),Branch:n((t=>r.branch(U(t))),"Branch"),Merge:n((t=>r.merge(Y(t))),"Merge"),Checkout:n((t=>r.checkout(V(t))),"Checkout"),CherryPicking:n((t=>r.cherryPick(J(t))),"CherryPicking")}[t.$type];e?e(t):i.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),K=n((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?w[t.type]:w.NORMAL,tags:t.tags??void 0})),"parseCommit"),U=n((t=>({name:t.name,order:t.order??0})),"parseBranch"),Y=n((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?w[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),V=n((t=>t.branch),"parseCheckout"),J=n((t=>({id:t.id,targetId:"",tags:0===t.tags?.length?void 0:t.tags,parent:t.parent})),"parseCherryPicking"),Q={parse:n((async t=>{const r=await b("gitGraph",t);i.debug(r),_(r,W)}),"parse")},X=o(),Z=X?.gitGraph,tt=10,rt=40,et=new Map,nt=new Map,ot=new Map,at=[],st=0,ct="LR",it=n((()=>{et.clear(),nt.clear(),ot.clear(),st=0,at=[],ct="LR"}),"clear"),ht=n((t=>{const r=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=t.trim(),r.appendChild(e)})),r}),"drawText"),dt=n((t=>{let r,e,o;return"BT"===ct?(e=n(((t,r)=>t<=r),"comparisonFunc"),o=1/0):(e=n(((t,r)=>t>=r),"comparisonFunc"),o=0),t.forEach((t=>{const n="TB"===ct||"BT"==ct?nt.get(t)?.y:nt.get(t)?.x;void 0!==n&&e(n,o)&&(r=t,o=n)})),r}),"findClosestParent"),mt=n((t=>{let r="",e=1/0;return t.forEach((t=>{const n=nt.get(t).y;n<=e&&(r=t,e=n)})),r||void 0}),"findClosestParentBT"),$t=n(((t,r,e)=>{let n=e,o=e;const a=[];t.forEach((t=>{const e=r.get(t);if(!e)throw new Error(`Commit not found for key ${t}`);e.parents.length?(n=yt(e),o=Math.max(n,o)):a.push(e),gt(e,n)})),n=o,a.forEach((t=>{pt(t,n,e)})),t.forEach((t=>{const e=r.get(t);if(e?.parents.length){const t=mt(e.parents);n=nt.get(t).y-rt,n<=o&&(o=n);const r=et.get(e.branch).pos,a=n-tt;nt.set(e.id,{x:r,y:a})}}))}),"setParallelBTPos"),lt=n((t=>{const r=dt(t.parents.filter((t=>null!==t)));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);const e=nt.get(r)?.y;if(void 0===e)throw new Error(`Closest parent position not found for commit ${t.id}`);return e}),"findClosestParentPos"),yt=n((t=>lt(t)+rt),"calculateCommitPosition"),gt=n(((t,r)=>{const e=et.get(t.branch);if(!e)throw new Error(`Branch not found for commit ${t.id}`);const n=e.pos,o=r+tt;return nt.set(t.id,{x:n,y:o}),{x:n,y:o}}),"setCommitPosition"),pt=n(((t,r,e)=>{const n=et.get(t.branch);if(!n)throw new Error(`Branch not found for commit ${t.id}`);const o=r+e,a=n.pos;nt.set(t.id,{x:a,y:o})}),"setRootPosition"),xt=n(((t,r,e,n,o,a)=>{if(a===w.HIGHLIGHT)t.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${r.id} commit-highlight${o%8} ${n}-outer`),t.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${r.id} commit${o%8} ${n}-inner`);else if(a===w.CHERRY_PICK)t.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`),t.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${r.id} ${n}`);else{const s=t.append("circle");if(s.attr("cx",e.x),s.attr("cy",e.y),s.attr("r",r.type===w.MERGE?9:10),s.attr("class",`commit ${r.id} commit${o%8}`),a===w.MERGE){const a=t.append("circle");a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",6),a.attr("class",`commit ${n} ${r.id} commit${o%8}`)}if(a===w.REVERSE){t.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${n} ${r.id} commit${o%8}`)}}}),"drawCommitBullet"),ft=n(((t,r,e,n)=>{if(r.type!==w.CHERRY_PICK&&(r.customId&&r.type===w.MERGE||r.type!==w.MERGE)&&Z?.showCommitLabel){const o=t.append("g"),a=o.insert("rect").attr("class","commit-label-bkg"),s=o.append("text").attr("x",n).attr("y",e.y+25).attr("class","commit-label").text(r.id),c=s.node()?.getBBox();if(c&&(a.attr("x",e.posWithOffset-c.width/2-2).attr("y",e.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===ct||"BT"===ct?(a.attr("x",e.x-(c.width+16+5)).attr("y",e.y-12),s.attr("x",e.x-(c.width+16)).attr("y",e.y+c.height-12)):s.attr("x",e.posWithOffset-c.width/2),Z.rotateCommitLabel))if("TB"===ct||"BT"===ct)s.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),a.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const t=-7.5-(c.width+10)/25*9.5,r=10+c.width/25*8.5;o.attr("transform","translate("+t+", "+r+") rotate(-45, "+n+", "+e.y+")")}}}),"drawCommitLabel"),ut=n(((t,r,e,n)=>{if(r.tags.length>0){let o=0,a=0,s=0;const c=[];for(const n of r.tags.reverse()){const r=t.insert("polygon"),i=t.append("circle"),h=t.append("text").attr("y",e.y-16-o).attr("class","tag-label").text(n),d=h.node()?.getBBox();if(!d)throw new Error("Tag bbox not found");a=Math.max(a,d.width),s=Math.max(s,d.height),h.attr("x",e.posWithOffset-d.width/2),c.push({tag:h,hole:i,rect:r,yOffset:o}),o+=20}for(const{tag:t,hole:r,rect:o,yOffset:i}of c){const c=s/2,h=e.y-19.2-i;if(o.attr("class","tag-label-bkg").attr("points",`\n      ${n-a/2-2},${h+2}  \n      ${n-a/2-2},${h-2}\n      ${e.posWithOffset-a/2-4},${h-c-2}\n      ${e.posWithOffset+a/2+4},${h-c-2}\n      ${e.posWithOffset+a/2+4},${h+c+2}\n      ${e.posWithOffset-a/2-4},${h+c+2}`),r.attr("cy",h).attr("cx",n-a/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===ct||"BT"===ct){const s=n+i;o.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${s+2}\n        ${e.x},${s-2}\n        ${e.x+tt},${s-c-2}\n        ${e.x+tt+a+4},${s-c-2}\n        ${e.x+tt+a+4},${s+c+2}\n        ${e.x+tt},${s+c+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),r.attr("cx",e.x+2).attr("cy",s).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),t.attr("x",e.x+5).attr("y",s+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+n+")")}}}}),"drawCommitTags"),bt=n((t=>{switch(t.customType??t.type){case w.NORMAL:return"commit-normal";case w.REVERSE:return"commit-reverse";case w.HIGHLIGHT:return"commit-highlight";case w.MERGE:return"commit-merge";case w.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),wt=n(((t,r,e,n)=>{const o={x:0,y:0};if(!(t.parents.length>0)){if("TB"===r)return 30;if("BT"===r){return(n.get(t.id)??o).y-rt}return 0}{const e=dt(t.parents);if(e){const a=n.get(e)??o;if("TB"===r)return a.y+rt;if("BT"===r){return(n.get(t.id)??o).y-rt}return a.x+rt}}return 0}),"calculatePosition"),Bt=n(((t,r,e)=>{const n="BT"===ct&&e?r:r+tt,o="TB"===ct||"BT"===ct?n:et.get(t.branch)?.pos,a="TB"===ct||"BT"===ct?et.get(t.branch)?.pos:n;if(void 0===a||void 0===o)throw new Error(`Position were undefined for commit ${t.id}`);return{x:a,y:o,posWithOffset:n}}),"getCommitPosition"),Et=n(((t,r,e)=>{if(!Z)throw new Error("GitGraph config not found");const o=t.append("g").attr("class","commit-bullets"),a=t.append("g").attr("class","commit-labels");let s="TB"===ct||"BT"===ct?30:0;const c=[...r.keys()],i=Z?.parallelCommits??!1,h=n(((t,e)=>{const n=r.get(t)?.seq,o=r.get(e)?.seq;return void 0!==n&&void 0!==o?n-o:0}),"sortKeys");let d=c.sort(h);"BT"===ct&&(i&&$t(d,r,s),d=d.reverse()),d.forEach((t=>{const n=r.get(t);if(!n)throw new Error(`Commit not found for key ${t}`);i&&(s=wt(n,ct,s,nt));const c=Bt(n,s,i);if(e){const t=bt(n),r=n.customType??n.type,e=et.get(n.branch)?.index??0;xt(o,n,c,t,e,r),ft(a,n,c,s),ut(a,n,c,s)}"TB"===ct||"BT"===ct?nt.set(n.id,{x:c.x,y:c.posWithOffset}):nt.set(n.id,{x:c.posWithOffset,y:c.y}),s="BT"===ct&&i?s+rt:s+rt+tt,s>st&&(st=s)}))}),"drawCommits"),kt=n(((t,r,e,o,a)=>{const s=("TB"===ct||"BT"===ct?e.x<o.x:e.y<o.y)?r.branch:t.branch,c=n((t=>t.branch===s),"isOnBranchToGetCurve"),i=n((e=>e.seq>t.seq&&e.seq<r.seq),"isBetweenCommits");return[...a.values()].some((t=>i(t)&&c(t)))}),"shouldRerouteArrow"),Ct=n(((t,r,e=0)=>{const n=t+Math.abs(t-r)/2;if(e>5)return n;if(at.every((t=>Math.abs(t-n)>=10)))return at.push(n),n;const o=Math.abs(t-r);return Ct(t,r-o/5,e+1)}),"findLane"),Lt=n(((t,r,e,n)=>{const o=nt.get(r.id),a=nt.get(e.id);if(void 0===o||void 0===a)throw new Error(`Commit positions not found for commits ${r.id} and ${e.id}`);const s=kt(r,e,o,a,n);let c,i="",h="",d=0,m=0,$=et.get(e.branch)?.index;if(e.type===w.MERGE&&r.id!==e.parents[0]&&($=et.get(r.branch)?.index),s){i="A 10 10, 0, 0, 0,",h="A 10 10, 0, 0, 1,",d=10,m=10;const t=o.y<a.y?Ct(o.y,a.y):Ct(a.y,o.y),e=o.x<a.x?Ct(o.x,a.x):Ct(a.x,o.x);"TB"===ct?o.x<a.x?c=`M ${o.x} ${o.y} L ${e-d} ${o.y} ${h} ${e} ${o.y+m} L ${e} ${a.y-d} ${i} ${e+m} ${a.y} L ${a.x} ${a.y}`:($=et.get(r.branch)?.index,c=`M ${o.x} ${o.y} L ${e+d} ${o.y} ${i} ${e} ${o.y+m} L ${e} ${a.y-d} ${h} ${e-m} ${a.y} L ${a.x} ${a.y}`):"BT"===ct?o.x<a.x?c=`M ${o.x} ${o.y} L ${e-d} ${o.y} ${i} ${e} ${o.y-m} L ${e} ${a.y+d} ${h} ${e+m} ${a.y} L ${a.x} ${a.y}`:($=et.get(r.branch)?.index,c=`M ${o.x} ${o.y} L ${e+d} ${o.y} ${h} ${e} ${o.y-m} L ${e} ${a.y+d} ${i} ${e-m} ${a.y} L ${a.x} ${a.y}`):o.y<a.y?c=`M ${o.x} ${o.y} L ${o.x} ${t-d} ${i} ${o.x+m} ${t} L ${a.x-d} ${t} ${h} ${a.x} ${t+m} L ${a.x} ${a.y}`:($=et.get(r.branch)?.index,c=`M ${o.x} ${o.y} L ${o.x} ${t+d} ${h} ${o.x+m} ${t} L ${a.x-d} ${t} ${i} ${a.x} ${t-m} L ${a.x} ${a.y}`)}else i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,"TB"===ct?(o.x<a.x&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${a.y-d} ${i} ${o.x+m} ${a.y} L ${a.x} ${a.y}`:`M ${o.x} ${o.y} L ${a.x-d} ${o.y} ${h} ${a.x} ${o.y+m} L ${a.x} ${a.y}`),o.x>a.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${a.y-d} ${h} ${o.x-m} ${a.y} L ${a.x} ${a.y}`:`M ${o.x} ${o.y} L ${a.x+d} ${o.y} ${i} ${a.x} ${o.y+m} L ${a.x} ${a.y}`),o.x===a.x&&(c=`M ${o.x} ${o.y} L ${a.x} ${a.y}`)):"BT"===ct?(o.x<a.x&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${a.y+d} ${h} ${o.x+m} ${a.y} L ${a.x} ${a.y}`:`M ${o.x} ${o.y} L ${a.x-d} ${o.y} ${i} ${a.x} ${o.y-m} L ${a.x} ${a.y}`),o.x>a.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",d=20,m=20,c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${a.y+d} ${i} ${o.x-m} ${a.y} L ${a.x} ${a.y}`:`M ${o.x} ${o.y} L ${a.x-d} ${o.y} ${i} ${a.x} ${o.y-m} L ${a.x} ${a.y}`),o.x===a.x&&(c=`M ${o.x} ${o.y} L ${a.x} ${a.y}`)):(o.y<a.y&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${a.x-d} ${o.y} ${h} ${a.x} ${o.y+m} L ${a.x} ${a.y}`:`M ${o.x} ${o.y} L ${o.x} ${a.y-d} ${i} ${o.x+m} ${a.y} L ${a.x} ${a.y}`),o.y>a.y&&(c=e.type===w.MERGE&&r.id!==e.parents[0]?`M ${o.x} ${o.y} L ${a.x-d} ${o.y} ${i} ${a.x} ${o.y-m} L ${a.x} ${a.y}`:`M ${o.x} ${o.y} L ${o.x} ${a.y+d} ${h} ${o.x+m} ${a.y} L ${a.x} ${a.y}`),o.y===a.y&&(c=`M ${o.x} ${o.y} L ${a.x} ${a.y}`));if(void 0===c)throw new Error("Line definition not found");t.append("path").attr("d",c).attr("class","arrow arrow"+$%8)}),"drawArrow"),Tt=n(((t,r)=>{const e=t.append("g").attr("class","commit-arrows");[...r.keys()].forEach((t=>{const n=r.get(t);n.parents&&n.parents.length>0&&n.parents.forEach((t=>{Lt(e,r.get(t),n,r)}))}))}),"drawArrows"),Mt=n(((t,r)=>{const e=t.append("g");r.forEach(((t,r)=>{const n=r%8,o=et.get(t.name)?.pos;if(void 0===o)throw new Error(`Position not found for branch ${t.name}`);const a=e.append("line");a.attr("x1",0),a.attr("y1",o),a.attr("x2",st),a.attr("y2",o),a.attr("class","branch branch"+n),"TB"===ct?(a.attr("y1",30),a.attr("x1",o),a.attr("y2",st),a.attr("x2",o)):"BT"===ct&&(a.attr("y1",st),a.attr("x1",o),a.attr("y2",30),a.attr("x2",o)),at.push(o);const s=t.name,c=ht(s),i=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);h.node().appendChild(c);const d=c.getBBox();i.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-d.width-4-(!0===Z?.rotateCommitLabel?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),h.attr("transform","translate("+(-d.width-14-(!0===Z?.rotateCommitLabel?30:0))+", "+(o-d.height/2-1)+")"),"TB"===ct?(i.attr("x",o-d.width/2-10).attr("y",0),h.attr("transform","translate("+(o-d.width/2-5)+", 0)")):"BT"===ct?(i.attr("x",o-d.width/2-10).attr("y",st),h.attr("transform","translate("+(o-d.width/2-5)+", "+st+")")):i.attr("transform","translate(-19, "+(o-d.height/2)+")")}))}),"drawBranches"),vt=n((function(t,r,e,n,o){return et.set(t,{pos:r,index:e}),r+=50+(o?40:0)+("TB"===ct||"BT"===ct?n.width/2:0)}),"setBranchPosition"),Pt={parser:Q,db:W,renderer:{draw:n((function(t,r,e,n){if(it(),i.debug("in gitgraph renderer",t+"\n","id:",r,e),!Z)throw new Error("GitGraph config not found");const o=Z.rotateCommitLabel??!1,a=n.db;ot=a.getCommits();const s=a.getBranchesAsObjArray();ct=a.getDirection();const c=x(`[id="${r}"]`);let h=0;s.forEach(((t,r)=>{const e=ht(t.name),n=c.append("g"),a=n.insert("g").attr("class","branchLabel"),s=a.insert("g").attr("class","label branch-label");s.node()?.appendChild(e);const i=e.getBBox();h=vt(t.name,h,r,i,o),s.remove(),a.remove(),n.remove()})),Et(c,ot,!1),Z.showBranches&&Mt(c,s),Tt(c,ot),Et(c,ot,!0),f.insertTitle(c,"gitTitleText",Z.titleTopMargin??0,a.getDiagramTitle()),u(void 0,c,Z.diagramPadding,Z.useMaxWidth)}),"draw")},styles:n((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((r=>`\n        .branch-label${r} { fill: ${t["gitBranchLabel"+r]}; }\n        .commit${r} { stroke: ${t["git"+r]}; fill: ${t["git"+r]}; }\n        .commit-highlight${r} { stroke: ${t["gitInv"+r]}; fill: ${t["gitInv"+r]}; }\n        .label${r}  { fill: ${t["git"+r]}; }\n        .arrow${r} { stroke: ${t["git"+r]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles")};export{Pt as diagram};
